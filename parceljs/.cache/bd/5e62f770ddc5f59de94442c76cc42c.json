{"id":"node_modules/highlight.js/lib/languages/mizar.js","dependencies":[{"name":"/Users/xiatian/Code/markdown-view/parceljs/package.json","includedInParent":true,"mtime":1597736707676},{"name":"/Users/xiatian/Code/markdown-view/parceljs/node_modules/highlight.js/package.json","includedInParent":true,"mtime":1597734698007}],"generated":{"js":"/*\nLanguage: Mizar\nDescription: The Mizar Language is a formal language derived from the mathematical vernacular.\nAuthor: Kelley van Evert <kelleyvanevert@gmail.com>\nWebsite: http://mizar.org/language/\nCategory: scientific\n*/\n\nfunction mizar(hljs) {\n  return {\n    name: 'Mizar',\n    keywords:\n      'environ vocabularies notations constructors definitions ' +\n      'registrations theorems schemes requirements begin end definition ' +\n      'registration cluster existence pred func defpred deffunc theorem ' +\n      'proof let take assume then thus hence ex for st holds consider ' +\n      'reconsider such that and in provided of as from be being by means ' +\n      'equals implies iff redefine define now not or attr is mode ' +\n      'suppose per cases set thesis contradiction scheme reserve struct ' +\n      'correctness compatibility coherence symmetry assymetry ' +\n      'reflexivity irreflexivity connectedness uniqueness commutativity ' +\n      'idempotence involutiveness projectivity',\n    contains: [\n      hljs.COMMENT('::', '$')\n    ]\n  };\n}\n\nmodule.exports = mizar;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/highlight.js/lib/languages/mizar.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}}],"sources":{"node_modules/highlight.js/lib/languages/mizar.js":"/*\nLanguage: Mizar\nDescription: The Mizar Language is a formal language derived from the mathematical vernacular.\nAuthor: Kelley van Evert <kelleyvanevert@gmail.com>\nWebsite: http://mizar.org/language/\nCategory: scientific\n*/\n\nfunction mizar(hljs) {\n  return {\n    name: 'Mizar',\n    keywords:\n      'environ vocabularies notations constructors definitions ' +\n      'registrations theorems schemes requirements begin end definition ' +\n      'registration cluster existence pred func defpred deffunc theorem ' +\n      'proof let take assume then thus hence ex for st holds consider ' +\n      'reconsider such that and in provided of as from be being by means ' +\n      'equals implies iff redefine define now not or attr is mode ' +\n      'suppose per cases set thesis contradiction scheme reserve struct ' +\n      'correctness compatibility coherence symmetry assymetry ' +\n      'reflexivity irreflexivity connectedness uniqueness commutativity ' +\n      'idempotence involutiveness projectivity',\n    contains: [\n      hljs.COMMENT('::', '$')\n    ]\n  };\n}\n\nmodule.exports = mizar;\n"},"lineCount":30}},"error":null,"hash":"d7dafbe59165c65b2912abf90256cf23","cacheData":{"env":{}}}
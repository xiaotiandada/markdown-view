{"id":"node_modules/highlight.js/lib/languages/clojure.js","dependencies":[{"name":"/Users/xiatian/Code/markdown-view/parceljs/package.json","includedInParent":true,"mtime":1597736707676},{"name":"/Users/xiatian/Code/markdown-view/parceljs/node_modules/highlight.js/package.json","includedInParent":true,"mtime":1597734698007}],"generated":{"js":"/*\nLanguage: Clojure\nDescription: Clojure syntax (based on lisp.js)\nAuthor: mfornos\nWebsite: https://clojure.org\nCategory: lisp\n*/\n\n/** @type LanguageFn */\nfunction clojure(hljs) {\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\n  var keywords = {\n    $pattern: SYMBOL_RE,\n    'builtin-name':\n      // Clojure keywords\n      globals + ' ' +\n      'cond apply if-not if-let if not not= = < > <= >= == + / * - rem ' +\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' +\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' +\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' +\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' +\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' +\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' +\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' +\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' +\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' +\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' +\n      'monitor-exit macroexpand macroexpand-1 for dosync and or ' +\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' +\n      'peek pop doto proxy first rest cons cast coll last butlast ' +\n      'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import ' +\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' +\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' +\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' +\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' +\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' +\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' +\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' +\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' +\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' +\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' +\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' +\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n  };\n\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number', begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    keywords: keywords,\n    className: 'name', begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n\n  var GLOBAL = {\n    beginKeywords: globals,\n    lexemes: SYMBOL_RE,\n    end: '(\\\\[|\\\\#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\n    contains: [\n      {\n        className: 'title',\n        begin: SYMBOL_RE,\n        relevance: 0,\n        excludeEnd: true,\n        // we can only have a single title\n        endsParent: true\n      },\n    ].concat(DEFAULT_CONTAINS)\n  };\n\n  LIST.contains = [hljs.COMMENT('comment', ''), GLOBAL, NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  HINT_COL.contains = [COLLECTION];\n\n  return {\n    name: 'Clojure',\n    aliases: ['clj'],\n    illegal: /\\S/,\n    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  };\n}\n\nmodule.exports = clojure;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/highlight.js/lib/languages/clojure.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}}],"sources":{"node_modules/highlight.js/lib/languages/clojure.js":"/*\nLanguage: Clojure\nDescription: Clojure syntax (based on lisp.js)\nAuthor: mfornos\nWebsite: https://clojure.org\nCategory: lisp\n*/\n\n/** @type LanguageFn */\nfunction clojure(hljs) {\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\n  var keywords = {\n    $pattern: SYMBOL_RE,\n    'builtin-name':\n      // Clojure keywords\n      globals + ' ' +\n      'cond apply if-not if-let if not not= = < > <= >= == + / * - rem ' +\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' +\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' +\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' +\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' +\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' +\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' +\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' +\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' +\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' +\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' +\n      'monitor-exit macroexpand macroexpand-1 for dosync and or ' +\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' +\n      'peek pop doto proxy first rest cons cast coll last butlast ' +\n      'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import ' +\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' +\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' +\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' +\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' +\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' +\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' +\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' +\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' +\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' +\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' +\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' +\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n  };\n\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number', begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    keywords: keywords,\n    className: 'name', begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n\n  var GLOBAL = {\n    beginKeywords: globals,\n    lexemes: SYMBOL_RE,\n    end: '(\\\\[|\\\\#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\n    contains: [\n      {\n        className: 'title',\n        begin: SYMBOL_RE,\n        relevance: 0,\n        excludeEnd: true,\n        // we can only have a single title\n        endsParent: true\n      },\n    ].concat(DEFAULT_CONTAINS)\n  };\n\n  LIST.contains = [hljs.COMMENT('comment', ''), GLOBAL, NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  HINT_COL.contains = [COLLECTION];\n\n  return {\n    name: 'Clojure',\n    aliases: ['clj'],\n    illegal: /\\S/,\n    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  };\n}\n\nmodule.exports = clojure;\n"},"lineCount":126}},"error":null,"hash":"93e8a058bf82bd7c6fc23343325e2883","cacheData":{"env":{}}}